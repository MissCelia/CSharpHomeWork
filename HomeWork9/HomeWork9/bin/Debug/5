<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="本文属于OData系列 目录（可能会有后续修改） &amp;quot;武装你的WEBAPI OData入门&amp;quot; &amp;quot;武装你的WEBAPI OData便捷查询&amp;quot; 武装你的WEBAPI " />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>武装你的WEBAPI-OData便捷查询 - 波多尔斯基 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=1ssrnY3Il79Ok472qeVrpxlSprSXcHhYPgZC5S3wtVM" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/podolski/custom.css?v=ailkZnJy5SEtevoTepStsXvnAYc=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/podolski/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/podolski/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/podolski/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=ADZDggF2NY5PM0ARXcJqg_CWlG3B72Ho5xCyukyKFbg"></script>
    <script>
        var currentBlogId = 180064;
        var currentBlogApp = 'podolski';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/podolski/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/podolski/">波多尔斯基</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/podolski/">
首页</a>
</li>
<li>


</li>
<li>
</li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/podolski/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
31&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
186</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/podolski/p/12880185.html">武装你的WEBAPI-OData便捷查询</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p><strong>本文属于OData系列</strong></p>
<p>目录（可能会有后续修改）</p>
<blockquote>
<ul>
<li><a href="https://www.cnblogs.com/podolski/p/12874013.html">武装你的WEBAPI-OData入门</a></li>
<li><a href="https://www.cnblogs.com/podolski/p/12880185.html">武装你的WEBAPI-OData便捷查询</a></li>
<li>武装你的WEBAPI-OData分页查询</li>
<li>武装你的WEBAPI-OData资源更新</li>
<li>武装你的WEBAPI-OData之EDM</li>
<li>武装你的WEBAPI-OData格式转换</li>
<li>武装你的WEBAPI-OData使用Endpoint</li>
</ul>
</blockquote>
<hr>
<h2 id="introduction">Introduction</h2>
<p>前文大概介绍了下OData，本文介绍下它强大便捷的查询。（后面的介绍都基于最新的OData V4）</p>
<p>假设现在有这么两个实体类，并按照前文建立了OData配置。</p>
<pre><code class="language-c#">public class DeviceInfo
{
    [Key]
    [MaxLength(200)]
    public string DeviceId { get; set; }
    //....//
    public float Longitude { get; set; }
    public Config[] Layout { get; set; }
}

public class AlarmInfo
{
    [Key]
    [MaxLength(200)]
    public string Id { get; set; }
    public string DeviceId { get; set; }
    public string Type { get; set; }
    [ForeignKey(&quot;DeviceId&quot;)]
    public virtual DeviceInfo DeviceInfo { get; set; }
    public bool Handled { get; set; }
    public long Timestamp { get; set; }
}
</code></pre>
<p>Controller设置如下，很简单，核心就几行：</p>
<pre><code class="language-c#">[ODataRoute]
[EnableQuery]
[ProducesResponseType(typeof(ODataValue&lt;IEnumerable&lt;DeviceInfo&gt;&gt;), Status200OK)]
public IActionResult Get()
{
    return Ok(_context.DeviceInfoes.AsQueryable());
}

[ODataRoute(&quot;({key})&quot;)]
[EnableQuery]
[ProducesResponseType(typeof(ODataValue&lt;IDeviceInfo&gt;), Status200OK)]
public IActionResult GetSingle([FromODataUri] string key)
{
    var result = _context.DeviceInfoes.Find(key);
    if (result == null) return NotFound(new ODataError() { ErrorCode = &quot;404&quot;, Message = &quot;Cannnot find key.&quot; });
    return Ok(result);
}
</code></pre>
<h2 id="集合与单对象">集合与单对象</h2>
<p>使用OData，可以很简单的访问集合与单个对象。</p>
<pre><code class="language-html">//访问集合
GET http://localhost:9000/api/DeviceInfoes

//访问单个对象，注意string类型需要用单引号。
GET http://localhost:9000/api/DeviceInfoes('device123')
</code></pre>
<h2 id="filter">$Filter</h2>
<p>请求集合很多，我们需要使用到查询来筛选数据，注意，这个查询是在服务器端执行的。</p>
<pre><code class="language-html">//查询特定设备在一个时间的数据，注意这里需要手动处理一下这个ID为deviceid。
GET http://localhost:9000/api/AlarmInfoes('device123')?$filter=(TimeStamp ge 12421552) and (TimeStamp le 31562346785561)
</code></pre>
<blockquote>
<p>$Filter支持很多种语法，可以让数据筛选按照调用方的意图进行自由组合，极大地提升了API的灵活性。</p>
</blockquote>
<h2 id="expand">$Expand</h2>
<p>在查询alarminfo的时候，我很需要API能够返回所有信息，其中包括对应的deviceinfo信息。但是标准的返回是这样的：</p>
<pre><code class="language-json">{
    &quot;@odata.context&quot;: &quot;http://localhost:9000/api/$metadata#AlarmInfoes&quot;,
    &quot;value&quot;: [
        {
            &quot;id&quot;: &quot;235314&quot;,
            &quot;deviceId&quot;: &quot;123&quot;,
            &quot;type&quot;: &quot;低温&quot;,
            &quot;handled&quot;: true,
            &quot;timestamp&quot;: 1589235890047
        },
        {
            &quot;id&quot;: &quot;6d2d3af3-2cf7-447e-822f-aab4634b3a13&quot;,
            &quot;deviceId&quot;: &quot;5s3&quot;,
            &quot;type&quot;: null,
            &quot;handled&quot;: true,
            &quot;timestamp&quot;: 0
        }]
}
</code></pre>
<p>只有一个干巴巴的deviceid，要实现展示所有信息的功能，就只能再从deviceinfo的API请求一次，获取对应ID的devceinfo信息。</p>
<blockquote>
<p>这就是所谓的N+1问题：请求具有子集的列表时，需要请求1次集合+请求N个集合内数据的具体内容。会造成查询效率的降低。</p>
</blockquote>
<p>不爽是不是？看下OData怎么做。请求如下：</p>
<pre><code class="language-html">GET http://localhost:9000/api/alarminfoes?$expand=deviceinfo
</code></pre>
<p>通过指定expand参数，就可以在返回中追加<strong>导航属性</strong>（navigation property）的信息。</p>
<blockquote>
<p>本例中是使用的外键实现的。</p>
</blockquote>
<pre><code class="language-json">{
&quot;@odata.context&quot;: &quot;http://localhost:9000/api/$metadata#AlarmInfoes(deviceInfo())&quot;,
&quot;value&quot;: [
    {
        &quot;id&quot;: &quot;235314&quot;,
        &quot;deviceId&quot;: &quot;123&quot;,
        &quot;type&quot;: &quot;低温&quot;,
        &quot;handled&quot;: true,
        &quot;timestamp&quot;: 1589235890047,
        &quot;deviceInfo&quot;: {
            &quot;deviceId&quot;: &quot;123&quot;,
            &quot;name&quot;: null,
            &quot;deviceType&quot;: null,
            &quot;location&quot;: &quot;plex&quot;,
            &quot;description&quot;: &quot;99&quot;,
            &quot;longitude&quot;: 99,
            &quot;layout&quot;: []
        }
    }
</code></pre>
<h2 id="层级查询">层级查询</h2>
<p>实现了展开之后，那能否查询在多个层级内的数据呢？也可以，考虑查询所有longitude大于90的alarmtype。</p>
<pre><code class="language-html">GET http://localhost:9000/api/alarminfoes?$expand=deviceinfo&amp;$filter=deviceinfo/longitude gt 90
</code></pre>
<blockquote>
<p>注意，这里表示层级不是使用<code>.</code>而是使用的<code>/</code>。如果使用<code>.</code>容易被浏览器误识别，需要特别配置一下。</p>
</blockquote>
<p>结果如下：</p>
<pre><code class="language-JSON">{
&quot;@odata.context&quot;: &quot;http://localhost:9000/api/$metadata#AlarmInfoes(deviceInfo())&quot;,
&quot;value&quot;: [
    {
        &quot;id&quot;: &quot;235314&quot;,
        &quot;deviceId&quot;: &quot;123&quot;,
        &quot;type&quot;: &quot;低温&quot;,
        &quot;handled&quot;: true,
        &quot;timestamp&quot;: 1589235890047,
        &quot;deviceInfo&quot;: {
            &quot;deviceId&quot;: &quot;123&quot;,
            &quot;name&quot;: null,
            &quot;deviceType&quot;: null,
            &quot;location&quot;: &quot;plex&quot;,
            &quot;description&quot;: &quot;99&quot;,
            &quot;longitude&quot;: 99,
            &quot;layout&quot;: []
        }
    }
</code></pre>
<h2 id="anyall">any/all</h2>
<p>可以使用any/all来执行对集合的判断。<br>
这个参考：</p>
<pre><code class="language-html">GET http://services.odata.org/V4/TripPinService/People?$filter=Emails/any(e: endswith(e, 'contoso.com'))
</code></pre>
<p>对于我的例子，我使用</p>
<pre><code class="language-html">GET http://localhost:9000/api/DeviceInfoes?$filter=layout/any(e: e/description eq '0')
</code></pre>
<p>服务器会弹出500服务器错误，提示：</p>
<pre><code class="language-log">System.InvalidOperationException: The LINQ expression 'DbSet&lt;DeviceInfo&gt;
    .Where(d =&gt; d.Layout
        .Any(e =&gt; e.Description.Contains(__TypedProperty_0)))' could not be translated. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to either AsEnumerable(), AsAsyncEnumerable(), ToList(), or ToListAsync(). See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.
</code></pre>
<p>查看<a href="https://docs.microsoft.com/zh-cn/ef/core/querying/client-eval">文档</a>之后，原来是我数据的层级比较深了，不在顶级层级类型的查询，在EF Core3.0的版本之前是支持的，在3.0以后就不支持了，主要是怕服务器内存溢出。如果真的要支持，那么就使用<code>AsEnumerable()</code>去实现客户端查询。</p>
<h2 id="datetime相关">datetime相关</h2>
<p>有同学已经注意到了，我这边使用的timestamp的格式是unix形式的时间戳，而没有使用到js常用的ISO8601格式（<code>2004-05-03T17:30:08+08:00</code>）。如果需要使用到这种时间怎么办？</p>
<p>OData提供了一个语法，使用<code>(datetime'2016-10-01T00:00:00')</code>这种形式来表示Datetime，这样就能够实现基于datetime的查询。</p>
<h2 id="查询顺序">查询顺序</h2>
<p>谓词会使用以下的顺序：$filter, $inlinecount(在V4中已经替换为$count), $orderby, $skiptoken, $skip, $top, $expand, $select, $format。<br>
filter总时最优先的，随后就是count，因此查询返回的count总是符合要求的所有数据的计数。</p>
<h2 id="范例学习">范例学习</h2>
<p>官方有一个查询的<a href="https://www.odata.org/odata-services/">Service</a>，可以参考学习和试用，给了很多POSTMAN的示例。</p>
<blockquote>
<p>不过有一些略坑的是，有的内容比如Paging里面，加入$count的返回是错的。</p>
</blockquote>
<h2 id="前端指南">前端指南</h2>
<p>查询的方法这么复杂，如果手动去拼接query string还是有点虚的，好在有很多库可以帮助我们做这个。</p>
<p>官方提供了各种语言的Client和Server的库：<a href="https://www.odata.org/libraries/">https://www.odata.org/libraries/</a></p>
<p>前端比较常用的有o.js</p>
<pre><code class="language-javascript">const response = await o('http://my.url')
  .get('User')
  .query({$filter: `UserName eq 'foobar'`}); 

console.log(response); // If one -&gt; the exact user, otherwise an array of users
</code></pre>
<p>这样可以免去拼请求字符串的烦恼，关于<code>o.js</code>的详细介绍，可以看<a href="https://www.odata.org/blog/OData-JavaScript-library-o.js-explained/">这里</a>。</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-odata/965a7cb1-663e-4eef-b9f6-388c7e5c9444?redirectedfrom=MSDN">https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-odata/965a7cb1-663e-4eef-b9f6-388c7e5c9444?redirectedfrom=MSDN</a></li>
</ul>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-13 11:19</span>&nbsp;
<a href="https://www.cnblogs.com/podolski/">波多尔斯基</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12880185" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12880185);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 180064, cb_blogApp = 'podolski', cb_blogUserGuid = '02d591a4-dab1-e311-8d02-90b11c0b17d6';
    var cb_entryId = 12880185, cb_entryCreatedDate = '2020-05-13 11:19', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 波多尔斯基
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>